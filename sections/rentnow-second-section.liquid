{{ 'section-second-rentnow.css' | asset_url | stylesheet_tag }}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Kristi&family=Syncopate:wght@700&display=swap" rel="stylesheet">

<link href="https://db.onlinewebfonts.com/c/1a5c2d8bbd4e28d99a6efcbb9a5b378f?family=JejuMyeongjo" rel="stylesheet">

<div class="rentnow-second-section">
  <h1>How long will you be travelling for?</h1>
  <h3>Click on the Month/Year to change its value.</h3>

  <div class="rentnow-header2-container1">
    <div class="rentnow-calendar-group">
      <div class="rentnow-first-calendar">
        <div class="rentnow-first-months">
          <label for="rentnow-first-month-dropdownmenu" class="rentnow-first-month-select" id="rentNowFirstMonthLabel"></label> 
          <select id="rentnow-first-month-dropdownmenu"> 
              <option value="January">January</option> 
              <option value="February">February</option> 
              <option value="March">March</option> 
              <option value="April">April</option>
              <option value="May">May</option> 
              <option value="June">June</option> 
              <option value="July">July</option> 
              <option value="August">August</option> 
              <option value="September">September</option> 
              <option value="October">October</option> 
              <option value="November">November</option>
              <option value="December">December</option> 
          </select>
          <label for="rentnow-first-year-dropdownmenu" class="rentnow-first-year-select" id="rentNowFirstYearLabel"></label> 
          <select id="rentnow-first-year-dropdownmenu"> 
              <option value="2023">2023</option> 
              <option value="2024">2024</option> 
              <option value="2025">2025</option> 
              <option value="2026">2026</option> 
              <option value="2027">2027</option>
              <option value="2028">2028</option> 
              <option value="2029">2030</option>
              <option value="2029">2031</option> 
              <option value="2029">2032</option> 
              <option value="2029">2033</option>  
          </select>
        </div>
        <div class="rentnow-first-weekdays">
          <p>Su</p>
          <p>Mo</p>
          <p>Tu</p>
          <p>We</p>
          <p>Th</p>
          <p>Fr</p>
          <p>Sa</p>          
        </div>
        <div class="rentnow-first-days"></div>
      </div>

      <div class="rentnow-second-calendar">
        <div class="rentnow-second-months">
          <label for="rentnow-second-month-dropdownmenu" class="rentnow-second-month-select" id="rentNowSecondMonthLabel"></label> 
          <select id="rentnow-second-month-dropdownmenu"> 
              <option value="January">January</option> 
              <option value="February">February</option> 
              <option value="March">March</option> 
              <option value="April">April</option>
              <option value="May">May</option> 
              <option value="June">June</option> 
              <option value="July">July</option> 
              <option value="August">August</option> 
              <option value="September">September</option> 
              <option value="October">October</option> 
              <option value="November">November</option>
              <option value="December">December</option> 
          </select>
          <label for="rentnow-second-year-dropdownmenu" class="rentnow-second-year-select" id="rentNowSecondYearLabel"></label> 
          <select id="rentnow-second-year-dropdownmenu"> 
              <option value="2023">2023</option> 
              <option value="2024">2024</option> 
              <option value="2025">2025</option> 
              <option value="2026">2026</option> 
              <option value="2027">2027</option>
              <option value="2028">2028</option> 
              <option value="2029">2030</option>
              <option value="2029">2031</option> 
              <option value="2029">2032</option> 
              <option value="2029">2033</option>  
          </select>
        </div>
        <div class="rentnow-second-weekdays">
          <p>Su</p>
          <p>Mo</p>
          <p>Tu</p>
          <p>We</p>
          <p>Th</p>
          <p>Fr</p>
          <p>Sa</p>
        </div>
        <div class="rentnow-second-days"></div>
      </div>
    </div>

    <div class="rentnow-calendar-legend">
      <div class="rentnow-subheader-container5">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none">
          <circle cx="12.375" cy="12.4671" r="11.5127" fill="#8A947F" fill-opacity="0.5"/>
        </svg>
        <h2>Collection/Return Dates Respectively (Free) </h2>
      </div>
      <div class="rentnow-subheader-container5">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none">
          <circle cx="12.375" cy="12.4671" r="11.5127" fill="#FFA665" fill-opacity="0.5"/>
        </svg>
        <h2>Selected Dates</h2>
      </div>
    </div>

    <h4 id="rentNowMonthError">Ahhh, that is not possible,  please choose a later month! Thank you!</h4>
    <h4 id="rentNowYearError">Ahhh, that is not possible,  please choose a later year! Thank you!</h4>
  </div>

</div>

{% schema %}
  {
    "name": "RentNow Second Section",
    "settings": [],
    "presets": [
        {
            "name": "RentNow Second Section"
        }
    ]
  }
{% endschema %}

{% stylesheet %}
{% endstylesheet %}

{% javascript %}

//Inserting Current Month/Year

const date = new Date();

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

// First Calendar

// Setting Default Month/Year
document.querySelector('.rentnow-first-month-select').innerHTML = months[date.getMonth()];

const secondMonth = new Date();
secondMonth.setMonth(secondMonth.getMonth() + 1);
document.querySelector(".rentnow-second-month-select").innerHTML = months[secondMonth.getMonth()];

const rentNowSecondYearLabel = document.getElementById('rentNowSecondYearLabel');
document.querySelector('.rentnow-second-year-select').innerHTML = "&nbsp;" + secondMonth.getFullYear();

// DropDown Menu for First Month and Year
const rentNowFirstMonthLabel = document.getElementById('rentNowFirstMonthLabel');
const dropdownMonth = document.getElementById("rentnow-first-month-dropdownmenu");

const rentNowFirstYearLabel = document.getElementById('rentNowFirstYearLabel');
document.querySelector('.rentnow-first-year-select').innerHTML = "&nbsp;" + date.getFullYear();

const currentYear = secondMonth.getFullYear();
const dropdownSecondYear = document.getElementById("rentnow-second-year-dropdownmenu");

const options = dropdownSecondYear.getElementsByTagName('option');
for (let i = 0; i < options.length; i++) {
  if (options[i].value == currentYear) {
    options[i].selected = true;
  } else {
    options[i].selected = false;
  }
}

const dropdownYear = document.getElementById('rentnow-first-year-dropdownmenu');

// Event listener for label click
rentNowFirstMonthLabel.addEventListener('click', function() {
  dropdownMonth.style.display = 'block'; 
  dropdownMonth.size= "7";
  dropdownMonth.click();
  event.stopPropagation();
});

// Event listener for dropdown change
dropdownMonth.addEventListener('change', function() {
  const selectedMonth = dropdownMonth.value;
  rentNowFirstMonthLabel.textContent = selectedMonth;
  dropdownMonth.style.display = 'none';

  const selectedMonthIndex = months.indexOf(selectedMonth);
  date.setMonth(selectedMonthIndex);

  const selectedYear = dropdownYear.value;

  secondMonth.setMonth(selectedMonthIndex + 1);
  secondMonth.setFullYear(selectedYear);

  // Check if the month of the second calendar is January
  if (secondMonth.getMonth() === 0) {
    secondMonth.setFullYear(secondMonth.getFullYear() + 1);
  }

  rentNowSecondMonthLabel.textContent = months[secondMonth.getMonth()];
  document.querySelector('.rentnow-second-year-select').innerHTML = "&nbsp;" + secondMonth.getFullYear();

  const currentYear = secondMonth.getFullYear();
  const dropdownSecondYear = document.getElementById("rentnow-second-year-dropdownmenu");

  const options = dropdownSecondYear.getElementsByTagName('option');
  for (let i = 0; i < options.length; i++) {
    if (options[i].value == currentYear) {
      options[i].selected = true;
    } else {
      options[i].selected = false;
    }
  }
  
  updateCalendar();
  attachEventListeners();
  applySelectedDates();
  applyFreeDates();
});


// Function to update the calendar
function updateCalendar() {
  const firstMonthDays = document.querySelector(".rentnow-first-days");
  let days = "";

  const secondMonthDays = document.querySelector(".rentnow-second-days");
  let secondDays = "";

  //First Calendar

  // Dates before Month
  const firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay();
  const lastDayPrevMonth = new Date(date.getFullYear(), date.getMonth(), 0).getDate();

  for (let x = firstDay - 1; x >= 0; x--) {
    days += `<p class="rentnow-prevdays">${lastDayPrevMonth - x}</p>`;
  }

  // Dates correspond to Month and Year
  const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();

  for (let i = 1; i <= lastDay; i++) {
    days += `<p>${i}</p>`;
  }

  // Dates after Month
  const lastDayIndex = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDay();
  const nextDays = 6 - lastDayIndex;

  for (let j = 1; j <= nextDays; j++) {
    days += `<p class="rentnow-nextdays">${j}</p>`;
  }

  firstMonthDays.innerHTML = days;

  //Second Calendar

  // Dates before Month
  const firstDaySecond = new Date(secondMonth.getFullYear(), secondMonth.getMonth(), 1).getDay();
  const lastDayPrevSecondMonth = new Date(secondMonth.getFullYear(), secondMonth.getMonth(), 0).getDate();

  for (let t = firstDaySecond - 1; t >= 0; t--) {
    secondDays += `<p class="rentnow-prevdays">${lastDayPrevSecondMonth - t}</p>`;
  }

  const lastDaySecond = new Date(secondMonth.getFullYear(), secondMonth.getMonth() + 1, 0).getDate();

  for (let y = 1; y <= lastDaySecond; y++) {
    secondDays += `<p>${y}</p>`;
  }

  const lastDaySecondIndex = new Date(secondMonth.getFullYear(), secondMonth.getMonth() + 1, 0).getDay();
  const secondNextDays = 6 - lastDaySecondIndex;

  for (let p = 1; p <= secondNextDays; p++) {
    secondDays += `<p class="rentnow-nextdays">${p}</p>`;
  }

  secondMonthDays.innerHTML = secondDays;
}

updateCalendar();

// Dates before Month
const firstPrevLastDay = new Date(date.getFullYear(), date.getMonth(), 0).getDate(); 
const firstFirstDayIndex = new Date(date.getFullYear(), date.getMonth(), 1).getDay();

let days = "";

for (let x = firstFirstDayIndex; x > 0; x--) {
  days += `<p class="rentnow-prevdays">${firstPrevLastDay - x +  1}</p>`; 
}

// Dates correspond to Month and Year
const firstMonthDays = document.querySelector(".rentnow-first-days");

const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();

for (let i = 1; i <= lastDay; i++) {
  days += `<p id="firstMonthDays">${i}</p>`;
}

// Dates after Month
const firstLastDayIndex = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDay();
const firstNextDays = 7 - firstLastDayIndex - 1;

for (let j = 1; j<= firstNextDays; j++) {
  days += `<p class="rentnow-nextdays">${j}</p>`;
  firstMonthDays.innerHTML = days;
}

// Event listener for label click
rentNowFirstYearLabel.addEventListener('click', function(event) {
  dropdownYear.style.display = 'block';
  dropdownYear.size = 7;
  dropdownYear.click();
  event.stopPropagation();
});

// Event listener for dropdown change
dropdownYear.addEventListener('change', function() {
  const selectedYear = dropdownYear.value;
  rentNowFirstYearLabel.textContent = "\u00A0" + selectedYear;
  dropdownYear.style.display = 'none';

  date.setFullYear(selectedYear);

  secondMonth.setFullYear(selectedYear);

  // Check if the month of the second calendar is January
  if (secondMonth.getMonth() === 0) {
    secondMonth.setFullYear(secondMonth.getFullYear() + 1);
  }

  rentNowSecondMonthLabel.textContent = months[secondMonth.getMonth()];
  document.querySelector('.rentnow-second-year-select').innerHTML = "&nbsp;" + secondMonth.getFullYear();

  updateCalendar();
  attachEventListeners();
  applySelectedDates();
  applyFreeDates();
});

// Second Calendar

// Second Month Dropdown Menu

const rentNowSecondMonthLabel = document.getElementById('rentNowSecondMonthLabel');
const dropdownSecondMonth = document.getElementById("rentnow-second-month-dropdownmenu");

const rentNowMonthError = document.getElementById('rentNowMonthError');
const rentNowYearError = document.getElementById('rentNowYearError');

rentNowSecondMonthLabel.addEventListener("click", function() {
  dropdownSecondMonth.style.display = 'block'; 
  dropdownSecondMonth.size= "7";
  dropdownSecondMonth.click();
  event.stopPropagation();
})

dropdownSecondMonth.addEventListener('change', function() {
  const selectedMonth = dropdownSecondMonth.value;

  if ( (dropdownSecondYear.value > dropdownYear.value)) {
    rentNowSecondMonthLabel.textContent = selectedMonth;
    dropdownSecondMonth.style.display = 'none';

    const selectedMonthIndex = months.indexOf(selectedMonth);
    secondMonth.setMonth(selectedMonthIndex);
    rentNowMonthError.style.display = 'none';

    updateCalendar();
    attachEventListeners();
    applySelectedDates();
    applyFreeDates();
  }

  else if ( (dropdownSecondYear.value === dropdownYear.value) && (months.indexOf(selectedMonth) > months.indexOf(rentNowFirstMonthLabel.textContent))) {
    rentNowSecondMonthLabel.textContent = selectedMonth;
    dropdownSecondMonth.style.display = 'none';

    const selectedMonthIndex = months.indexOf(selectedMonth);
    secondMonth.setMonth(selectedMonthIndex);
    rentNowMonthError.style.display = 'none';

    updateCalendar();
    attachEventListeners();
    applySelectedDates();
    applyFreeDates();
  }

  else {
    console.log("Invalid Input Month");
    rentNowMonthError.style.display = 'flex';
  }

});

// Second Year Dropdown Menu

rentNowSecondYearLabel.addEventListener('click', function(event) {
  dropdownSecondYear.style.display = 'block';
  dropdownSecondYear.size = 7;
  dropdownSecondYear.click();
  event.stopPropagation();
});

// Event listener for dropdown change
dropdownSecondYear.addEventListener('change', function() {
  const selectedYear = dropdownSecondYear.value;

  if ( (dropdownSecondYear.value > dropdownYear.value)) {
    console.log("running if");
    rentNowSecondYearLabel.textContent = "\u00A0" + selectedYear;
    dropdownSecondYear.style.display = 'none';
    rentNowYearError.style.display = 'none';

    secondMonth.setFullYear(selectedYear);

    updateCalendar();
    attachEventListeners();
    applySelectedDates();
    applyFreeDates();
  }

  else if ( (dropdownSecondYear.value === dropdownYear.value) && (months.indexOf(rentNowSecondMonthLabel.textContent) > months.indexOf(rentNowFirstMonthLabel.textContent))) {
    rentNowSecondYearLabel.textContent = "\u00A0" + selectedYear;
    dropdownSecondYear.style.display = 'none';

    secondMonth.setFullYear(selectedYear);
    rentNowYearError.style.display = 'none';

    updateCalendar();
    attachEventListeners();
    applySelectedDates();
    applyFreeDates();
  }

  else {
    console.log("Invalid Input Year");
    rentNowYearError.style.display = 'flex';
  }

});

// Dates before Month

const secondPrevLastDay = new Date(secondMonth.getFullYear(), secondMonth.getMonth(), 0).getDate(); 
const secondFirstDayIndex = new Date(secondMonth.getFullYear(), secondMonth.getMonth(), 1).getDay();

let secondDays = "";

for (let t = secondFirstDayIndex; t > 0; t--) {
  secondDays += `<p class="rentnow-prevdays">${secondPrevLastDay - t +  1}</p>`; 
}

// Dates correspond to Month and Year
const secondMonthDays = document.querySelector(".rentnow-second-days");

const lastDaySecond = new Date(secondMonth.getFullYear(), secondMonth.getMonth() + 1, 0).getDate();

for (let y = 1; y <= lastDaySecond; y++) {
  secondDays += `<p id="firstMonthDays">${y}</p>`;
}

// Dates after Month
const secondLastDayIndex = new Date(secondMonth.getFullYear(), secondMonth.getMonth() + 1, 0).getDay();
const secondNextDays = 7 - secondLastDayIndex - 1;

for (let p = 1; p <= secondNextDays; p++) {
  secondDays += `<p class="rentnow-nextdays">${p}</p>`;
  secondMonthDays.innerHTML = secondDays;
}

// Date Selection

// Checking Month Labels

const firstCalendarDays = document.querySelector(".rentnow-first-days");
const secondCalendarDays = document.querySelector(".rentnow-second-days");

[firstCalendarDays, secondCalendarDays].forEach(container => {
    container.querySelectorAll('p').forEach(pElement => {
        pElement.addEventListener('click', selectionOfDays);
    });
});

let startDate = null;
let endDate = null;

function selectionOfDays(event) {

    const clickedDay = event.target.textContent;

    let clickedMonth = null;

    if (!startDate) {
        const monthContainer = findMonthContainer(event.target);

        if (monthContainer) {
            const clickedMonth = monthContainer.textContent.trim();
            startDate = clickedDay + ' ' + clickedMonth;
            event.target.classList.add('rentnow-start-date');
        }
    }

    else if (!endDate) {
        const monthContainer = findMonthContainer(event.target);

        if (monthContainer) {
            const clickedMonth = monthContainer.textContent.trim();
            endDate = clickedDay + ' ' + clickedMonth;
            event.target.classList.add('rentnow-end-date');
        }

        applySelectedDates();
        applyFreeDates();
    }

    else {
      // Remove existing classes to clear previous selection
       document.querySelectorAll('.rentnow-start-date, .rentnow-end-date, .rentnow-selected-date, .rentnow-selected-first-date, .rentnow-selected-last-date, .rentnow-selected-start-date, .rentnow-selected-end-date, .rentnow-free-first-date, .rentnow-free-last-date').forEach(element => {
            element.classList.remove('rentnow-start-date', 'rentnow-end-date', 'rentnow-selected-date', 'rentnow-selected-first-date', 'rentnow-selected-last-date', 'rentnow-selected-start-date', 'rentnow-selected-end-date', 'rentnow-free-first-date', 'rentnow-free-last-date');
        });

       const monthContainer = findMonthContainer(event.target);

        if (monthContainer) {
            const clickedMonth = monthContainer.textContent.trim();
            startDate = clickedDay + ' ' + clickedMonth;
            event.target.classList.add('rentnow-start-date');
            endDate = null;
        }
    }

    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);
}

function findMonthContainer(element) {
    while (element) {
        if (element.classList) {
            if (element.classList.contains('rentnow-first-calendar')) {
                return document.querySelector('#rentNowFirstMonthLabel');
            } else if (element.classList.contains('rentnow-second-calendar')) {
                return document.querySelector('#rentNowSecondMonthLabel');
            }
        }
        element = element.parentNode;
    }
    return null;
}

function applySelectedDates() {
    // Find all date elements
    // Select all <p> elements within the calendars

    if (endDate && isEndDateBeforeStartDate(endDate, startDate)) {
        console.log("Invalid input");
        return;  // Exit the function if invalid input
    }

    const allDateElements = [
        ...firstCalendarDays.querySelectorAll('p'),
        ...secondCalendarDays.querySelectorAll('p')
    ];

    // Exclude elements with classes "rentnow-prevdays" and "rentnow-nextdays"
    const dateElements = allDateElements.filter(pElement => (
        !pElement.classList.contains('rentnow-prevdays') && !pElement.classList.contains('rentnow-nextdays')
    ));

    // Add event listener to filtered date elements
    dateElements.forEach(pElement => {
        pElement.addEventListener('click', selectionOfDays);
    });

    let startSelected = false;
    let endSelected = false;

    // Iterate through the date elements
    dateElements.forEach(element => {
        const date = parseInt(element.textContent, 10);
        const monthContainer = findMonthContainer(element);

        if (monthContainer) {
            const month = monthContainer.textContent.trim();
            const currentDate = date + ' ' + month;

            if (isDateInRange(currentDate, startDate, endDate)) {
                element.classList.add('rentnow-selected-date');

                const currentDateObj = new Date(currentDate);

                // Check if the current date is one day after the start date
                const oneDayAfterStartDate = new Date(startDate);
                oneDayAfterStartDate.setDate(oneDayAfterStartDate.getDate() + 1);

                if (!startSelected && currentDateObj.getTime() === oneDayAfterStartDate.getTime()) {
                    // Apply class to the date one day after the start date
                    startSelected = true;
                    element.classList.add('rentnow-selected-first-date');
                }

                // Check if the current date is one day before the end date
                const oneDayBeforeEndDate = new Date(endDate);
                oneDayBeforeEndDate.setDate(oneDayBeforeEndDate.getDate() - 1);

                if (currentDateObj.getTime() === oneDayBeforeEndDate.getTime()) {
                    // Apply class to the date one day before the end date
                    endSelected = true;
                    element.classList.add('rentnow-selected-last-date');
                }

                // Check if the current date is the first day of the month
                const firstDayOfMonth = new Date(currentDateObj.getFullYear(), currentDateObj.getMonth(), 1);

                if (currentDateObj.getTime() === firstDayOfMonth.getTime()) {
                    // Apply class to the first day of the month
                    element.classList.add('rentnow-selected-start-date');
                }

                // Check if the current date is the last day of the month
                const lastDayOfMonth = new Date(currentDateObj.getFullYear(), currentDateObj.getMonth() + 1, 0);

                if (currentDateObj.getTime() === lastDayOfMonth.getTime()) {
                    // Apply class to the last day of the month
                    element.classList.add('rentnow-selected-end-date');
                }
            }
        }
    });
}

function isDateInRange(currentDate, startDate, endDate) {
    // Convert dates to JavaScript Date objects
    const current = new Date(currentDate);
    const start = new Date(startDate);
    const end = new Date(endDate);

    // Check if the current date is within the range
    if (start.getMonth() === end.getMonth()) {
        return current > start && current < end;
    } else {
        // Check if the current date is after the start date in the start month
        if (current > start && current.getMonth() === start.getMonth()) {
            return true;
        }
        // Check if the current date is before the end date in the end month
        if (current < end && current.getMonth() === end.getMonth()) {
            return true;
        }
        return false;
    }
}

function applyFreeDates() {
    const startDateObj = new Date(startDate);
    const endDateObj = new Date(endDate);

    // Calculate two days before the startDate
    const twoDaysBeforeStartDate = new Date(startDateObj);
    twoDaysBeforeStartDate.setDate(startDateObj.getDate() - 2);

    // Calculate two days after the endDate
    const twoDaysBeforeEndDate = new Date(endDateObj);
    twoDaysBeforeEndDate.setDate(endDateObj.getDate() + 2);

    // Calculate one day before the startDate
    const oneDayBeforeStartDate = new Date(startDateObj);
    oneDayBeforeStartDate.setDate(startDateObj.getDate() - 1);

    // Calculate one day after the endDate
    const oneDayBeforeEndDate = new Date(endDateObj);
    oneDayBeforeEndDate.setDate(endDateObj.getDate() + 1);

    // Find all date elements
    const allDateElements = [
        ...firstCalendarDays.querySelectorAll('p'),
        ...secondCalendarDays.querySelectorAll('p')
    ];

    // Exclude elements with classes "rentnow-prevdays" and "rentnow-nextdays"
    const dateElements = allDateElements.filter(pElement => (
        !pElement.classList.contains('rentnow-prevdays') && !pElement.classList.contains('rentnow-nextdays')
    ));

    // Iterate through the date elements
    dateElements.forEach(element => {
        const date = parseInt(element.textContent, 10);
        const monthContainer = findMonthContainer(element);

        if (monthContainer) {
            const month = monthContainer.textContent.trim();
            const currentDate = date + ' ' + month;
            const currentDateObj = new Date(currentDate);

            if (currentDateObj.getTime() === twoDaysBeforeStartDate.getTime()) {
                element.classList.add('rentnow-free-first-date');
            }

            else if (currentDateObj.getTime() === oneDayBeforeStartDate.getTime()) {
                element.classList.add('rentnow-free-last-date');
            }

            else if (currentDateObj.getTime() === oneDayBeforeEndDate.getTime()) {
                element.classList.add('rentnow-free-first-date');
            }

            else if (currentDateObj.getTime() === twoDaysBeforeEndDate.getTime()) {
                element.classList.add('rentnow-free-last-date');
            }
        }
    });
}

function attachEventListeners() {
    const firstCalendarDays = document.querySelector(".rentnow-first-days");
    const secondCalendarDays = document.querySelector(".rentnow-second-days");

    [firstCalendarDays, secondCalendarDays].forEach(container => {
        container.querySelectorAll('p').forEach(pElement => {
            pElement.addEventListener('click', selectionOfDays);
        });
    });
}

function isEndDateBeforeStartDate(endDate, startDate) {
    const endDateObj = new Date(endDate);
    const startDateObj = new Date(startDate);

    // Compare the dates
    return endDateObj.getTime() < startDateObj.getTime();

}

{% endjavascript %}